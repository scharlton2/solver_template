name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo
  # Based on https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17768/w_BaseKit_p_2021.2.0.2871.exe
  WINDOWS_BASEKIT_FILE: basekit.exe
  WINDOWS_BASEKIT_COMPONENTS: intel.oneapi.win.dpcpp-compiler
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17762/w_HPCKit_p_2021.2.0.2901.exe
  WINDOWS_HPCKIT_FILE: hpckit.exe
  WINDOWS_HPCKIT_COMPONENTS: intel.oneapi.win.ifort-compiler

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Report space before
      run: Get-PSDrive

    - name: Cache oneAPI
      id: cache-oneapi
      uses: actions/cache@v2
      with:
        path: C:\Program Files (x86)\Intel\oneAPI
        key: install-oneapi-w_BaseKit_p_2021.2.0.2871-w_HPCKit_p_2021.2.0.2901

    - name: Install oneAPI
      shell: cmd
      if: steps.cache-oneapi.outputs.cache-hit != 'true'
      run: |
        curl -fSLo %WINDOWS_BASEKIT_FILE% %WINDOWS_BASEKIT_URL%
        start /b /wait %WINDOWS_BASEKIT_FILE% -s -x -f basekit_extracted --log basekit_extracted.log
        basekit_extracted\bootstrapper.exe -s --action install --components=%WINDOWS_BASEKIT_COMPONENTS% --eula=accept --continue-with-optional-error=yes -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=1 --log-dir=.
        curl -fSLo %WINDOWS_HPCKIT_FILE% %WINDOWS_HPCKIT_URL%
        start /b /wait %WINDOWS_HPCKIT_FILE% -s -x -f hpckit_extracted --log hpckit_extracted.log
        hpckit_extracted\bootstrapper.exe -s --action install --components=%WINDOWS_HPCKIT_COMPONENTS% --eula=accept --continue-with-optional-error=yes -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=1 --log-dir=.

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # Need paths for fortran dlls (from setvars.bat)
      shell: cmd
      run: |
        "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64 vs2019
        ctest -C %BUILD_TYPE%
      
    - name: Report space after
      run: Get-PSDrive
